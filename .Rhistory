# k-means clustering
km <-kmeans(boston_K_scaled, centers = 2, nstart = 20)
km
# plot the Boston dataset with clusters
pairs(boston_K_scaled[1:5], col = km$cluster)
pairs(boston_K_scaled[6:10], col = km$cluster)
library(MASS)
data('Boston')
# center and standardize variables
boston_K2_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_K2_scaled)
# class of the boston_scaled object
class(boston_K2_scaled)
# change the object to data frame
boston_K2_scaled <- as.data.frame(boston_K2_scaled)
#
km <-kmeans(boston_K2_scaled, centers = 2, nstart = 20)
km
# number of rows in the Boston dataset
n <- nrow(boston_K2_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_K2_scaled[ind,]
# create test set
test <- boston_K2_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
install.packages("dplyr")
install.packages("dplyr")
ggpairs(Boston, lower = list(combo  =wrap("facethist", bins=20)))
install.packages("corrplot")
install.packages("tidyr")
install.packages("dplyr")
test
library(ggplot2); library(GGally); library(corrplot); library(tidyr); library(dplyr)
# access the MASS package
library(MASS)
# load the data
data("Boston")
# explore the dataset
str(Boston)
summary(Boston)
pairs(Boston)
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(digits = 2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="square", type="lower", cl.pos="b", tl.pos="d", tl.cex = 0.6)
# center and standardize variables
boston_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_scaled)
# class of the boston_scaled object
class(boston_scaled)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor crime
table(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# linear discriminant analysis
lda.fit <- lda(crime ~ ., data = train)
# print the lda.fit object
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1.5)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
tt <- table(correct = correct_classes, predicted = lda.pred$class)
tt
error = sum(tt[row(tt) != col(tt)]) / sum(tt)
error
summary(test)
library(MASS)
data('Boston')
# center and standardize variables
boston_K_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_K_scaled)
# class of the boston_scaled object
class(boston_K_scaled)
# change the object to data frame
boston_K_scaled <- as.data.frame(boston_K_scaled)
# euclidean distance matrix
dist_eu <- dist(boston_K_scaled)
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_K_scaled, method = 'manhattan')
# look at the summary of the distances
summary(dist_man)
# k-means clustering
km <-kmeans(boston_K_scaled, centers = 4)
# plot the Boston dataset with clusters
pairs(boston_K_scaled, col = km$cluster)
set.seed(123) #K-means might produce different results every time, because it randomly assigns the initial cluster centers. This function is used to deal with that.
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(boston_K_scaled, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(boston_K_scaled, centers = 2, nstart = 20)
km
# plot the Boston dataset with clusters
pairs(boston_K_scaled[1:5], col = km$cluster)
pairs(boston_K_scaled[6:10], col = km$cluster)
library(MASS)
data('Boston')
# center and standardize variables
boston_K2_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_K2_scaled)
# class of the boston_scaled object
class(boston_K2_scaled)
# change the object to data frame
boston_K2_scaled <- as.data.frame(boston_K2_scaled)
#
km <-kmeans(boston_K2_scaled, centers = 2, nstart = 20)
km
# number of rows in the Boston dataset
n <- nrow(boston_K2_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_K2_scaled[ind,]
# create test set
test <- boston_K2_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
rlang::last_error()
install.packages("tidyverse")
library(ggplot2); library(GGally); library(corrplot); library(tidyr); library(dplyr)
# access the MASS package
library(MASS)
# load the data
data("Boston")
# explore the dataset
str(Boston)
summary(Boston)
pairs(Boston)
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(digits = 2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="square", type="lower", cl.pos="b", tl.pos="d", tl.cex = 0.6)
# center and standardize variables
boston_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_scaled)
# class of the boston_scaled object
class(boston_scaled)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor crime
table(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# linear discriminant analysis
lda.fit <- lda(crime ~ ., data = train)
# print the lda.fit object
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1.5)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
tt <- table(correct = correct_classes, predicted = lda.pred$class)
tt
error = sum(tt[row(tt) != col(tt)]) / sum(tt)
error
summary(test)
library(MASS)
data('Boston')
# center and standardize variables
boston_K_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_K_scaled)
# class of the boston_scaled object
class(boston_K_scaled)
# change the object to data frame
boston_K_scaled <- as.data.frame(boston_K_scaled)
# euclidean distance matrix
dist_eu <- dist(boston_K_scaled)
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_K_scaled, method = 'manhattan')
# look at the summary of the distances
summary(dist_man)
# k-means clustering
km <-kmeans(boston_K_scaled, centers = 4)
# plot the Boston dataset with clusters
pairs(boston_K_scaled, col = km$cluster)
set.seed(123) #K-means might produce different results every time, because it randomly assigns the initial cluster centers. This function is used to deal with that.
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(boston_K_scaled, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(boston_K_scaled, centers = 2, nstart = 20)
km
# plot the Boston dataset with clusters
pairs(boston_K_scaled[1:5], col = km$cluster)
pairs(boston_K_scaled[6:10], col = km$cluster)
library(MASS)
data('Boston')
# center and standardize variables
boston_K2_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_K2_scaled)
# class of the boston_scaled object
class(boston_K2_scaled)
# change the object to data frame
boston_K2_scaled <- as.data.frame(boston_K2_scaled)
#
km <-kmeans(boston_K2_scaled, centers = 2, nstart = 20)
km
# number of rows in the Boston dataset
n <- nrow(boston_K2_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_K2_scaled[ind,]
# create test set
test <- boston_K2_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# number of rows in the Boston dataset
n <- nrow(boston_K2_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_K2_scaled[ind,]
# create test set
test <- boston_K2_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# number of rows in the Boston dataset
n2 <- nrow(boston_K2_scaled)
# choose randomly 80% of the rows
ind2 <- sample(n2,  size = n2 * 0.8)
# create train set
train2 <- boston_K2_scaled[ind,]
# create test set
test2 <- boston_K2_scaled[-ind,]
# save the correct classes from test data
correct_classes2 <- test2$crime
# remove the crime variable from test data
test2 <- dplyr::select(test2, -crime)
install.packages("corrplot")
install.packages("tidyr")
install.packages("dplyr")
library(ggplot2); library(GGally); library(corrplot); library(tidyr); library(dplyr)
# access the MASS package
library(MASS)
# load the data
data("Boston")
# explore the dataset
str(Boston)
summary(Boston)
pairs(Boston)
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(digits = 2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="square", type="lower", cl.pos="b", tl.pos="d", tl.cex = 0.6)
# center and standardize variables
boston_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_scaled)
# class of the boston_scaled object
class(boston_scaled)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor crime
table(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# linear discriminant analysis
lda.fit <- lda(crime ~ ., data = train)
# print the lda.fit object
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1.5)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
tt <- table(correct = correct_classes, predicted = lda.pred$class)
tt
error = sum(tt[row(tt) != col(tt)]) / sum(tt)
error
summary(test)
library(MASS)
data('Boston')
# center and standardize variables
boston_K_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_K_scaled)
# class of the boston_scaled object
class(boston_K_scaled)
# change the object to data frame
boston_K_scaled <- as.data.frame(boston_K_scaled)
# euclidean distance matrix
dist_eu <- dist(boston_K_scaled)
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_K_scaled, method = 'manhattan')
# look at the summary of the distances
summary(dist_man)
# k-means clustering
km <-kmeans(boston_K_scaled, centers = 4)
# plot the Boston dataset with clusters
pairs(boston_K_scaled, col = km$cluster)
set.seed(123) #K-means might produce different results every time, because it randomly assigns the initial cluster centers. This function is used to deal with that.
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(boston_K_scaled, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(boston_K_scaled, centers = 2, nstart = 20)
km
# plot the Boston dataset with clusters
pairs(boston_K_scaled[1:5], col = km$cluster)
pairs(boston_K_scaled[6:10], col = km$cluster)
library(MASS)
data('Boston')
# center and standardize variables
boston_K2_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_K2_scaled)
# class of the boston_scaled object
class(boston_K2_scaled)
# change the object to data frame
boston_K2_scaled <- as.data.frame(boston_K2_scaled)
#
km <-kmeans(boston_K2_scaled, centers = 2, nstart = 20)
km
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# number of rows in the km dataset
n <- nrow(km)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# number of rows in the km dataset
n <- nrow(km)
n
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
km <- as.data.frame(km)
class(km)
km <- as.data.frame(km)
class(km)
km <- as.matrix(km)
# number of rows in the km dataset
n <- nrow(km)
n
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- km[ind,]
# create test set
test <- km[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
