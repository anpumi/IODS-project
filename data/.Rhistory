# summaries of the scaled variables
summary(boston_scaled)
# class of the boston_scaled object
class(boston_scaled)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor crime
table(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# linear discriminant analysis
lda.fit <- lda(crime ~ ., data = train)
# print the lda.fit object
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1.5)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
tt <- table(correct = correct_classes, predicted = lda.pred$class)
tt
error = sum(tt[row(tt) != col(tt)]) / sum(tt)
error
summary(test)
library(MASS)
data('Boston')
# center and standardize variables
boston_K_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_K_scaled)
# class of the boston_scaled object
class(boston_K_scaled)
# change the object to data frame
boston_K_scaled <- as.data.frame(boston_K_scaled)
# euclidean distance matrix
dist_eu <- dist(boston_K_scaled)
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_K_scaled, method = 'manhattan')
# look at the summary of the distances
summary(dist_man)
# k-means clustering
km <-kmeans(boston_K_scaled, centers = 4)
# plot the Boston dataset with clusters
pairs(boston_K_scaled, col = km$cluster)
set.seed(123) #K-means might produce different results every time, because it randomly assigns the initial cluster centers. This function is used to deal with that.
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(boston_K_scaled, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(boston_K_scaled, centers = 2, nstart = 20)
km
# plot the Boston dataset with clusters
pairs(boston_K_scaled[1:5], col = km$cluster)
pairs(boston_K_scaled[6:10], col = km$cluster)
library(MASS)
data('Boston')
# center and standardize variables
boston_K2_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_K2_scaled)
# class of the boston_scaled object
class(boston_K2_scaled)
# change the object to data frame
boston_K2_scaled <- as.data.frame(boston_K2_scaled)
#
km <-kmeans(boston_K2_scaled, centers = 2, nstart = 20)
km
# number of rows in the Boston dataset
n <- nrow(boston_K2_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_K2_scaled[ind,]
# create test set
test <- boston_K2_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
rlang::last_error()
install.packages("tidyverse")
library(ggplot2); library(GGally); library(corrplot); library(tidyr); library(dplyr)
# access the MASS package
library(MASS)
# load the data
data("Boston")
# explore the dataset
str(Boston)
summary(Boston)
pairs(Boston)
# calculate the correlation matrix and round it
cor_matrix<-cor(Boston) %>% round(digits = 2)
# print the correlation matrix
cor_matrix
# visualize the correlation matrix
corrplot(cor_matrix, method="square", type="lower", cl.pos="b", tl.pos="d", tl.cex = 0.6)
# center and standardize variables
boston_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_scaled)
# class of the boston_scaled object
class(boston_scaled)
# change the object to data frame
boston_scaled <- as.data.frame(boston_scaled)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
bins
# create a categorical variable 'crime'
crime <- cut(boston_scaled$crim, breaks = bins, include.lowest = TRUE, labels = c("low", "med_low", "med_high", "high"))
# look at the table of the new factor crime
table(crime)
# remove original crim from the dataset
boston_scaled <- dplyr::select(boston_scaled, -crim)
# add the new categorical value to scaled data
boston_scaled <- data.frame(boston_scaled, crime)
# number of rows in the Boston dataset
n <- nrow(boston_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_scaled[ind,]
# create test set
test <- boston_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# linear discriminant analysis
lda.fit <- lda(crime ~ ., data = train)
# print the lda.fit object
lda.fit
# the function for lda biplot arrows
lda.arrows <- function(x, myscale = 1, arrow_heads = 0.1, color = "orange", tex = 0.75, choices = c(1,2)){
heads <- coef(x)
arrows(x0 = 0, y0 = 0,
x1 = myscale * heads[,choices[1]],
y1 = myscale * heads[,choices[2]], col=color, length = arrow_heads)
text(myscale * heads[,choices], labels = row.names(heads),
cex = tex, col=color, pos=3)
}
# target classes as numeric
classes <- as.numeric(train$crime)
# plot the lda results
plot(lda.fit, dimen = 2, col = classes, pch = classes)
lda.arrows(lda.fit, myscale = 1.5)
# predict classes with test data
lda.pred <- predict(lda.fit, newdata = test)
# cross tabulate the results
tt <- table(correct = correct_classes, predicted = lda.pred$class)
tt
error = sum(tt[row(tt) != col(tt)]) / sum(tt)
error
summary(test)
library(MASS)
data('Boston')
# center and standardize variables
boston_K_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_K_scaled)
# class of the boston_scaled object
class(boston_K_scaled)
# change the object to data frame
boston_K_scaled <- as.data.frame(boston_K_scaled)
# euclidean distance matrix
dist_eu <- dist(boston_K_scaled)
# look at the summary of the distances
summary(dist_eu)
# manhattan distance matrix
dist_man <- dist(boston_K_scaled, method = 'manhattan')
# look at the summary of the distances
summary(dist_man)
# k-means clustering
km <-kmeans(boston_K_scaled, centers = 4)
# plot the Boston dataset with clusters
pairs(boston_K_scaled, col = km$cluster)
set.seed(123) #K-means might produce different results every time, because it randomly assigns the initial cluster centers. This function is used to deal with that.
# determine the number of clusters
k_max <- 10
# calculate the total within sum of squares
twcss <- sapply(1:k_max, function(k){kmeans(boston_K_scaled, k)$tot.withinss})
# visualize the results
qplot(x = 1:k_max, y = twcss, geom = 'line')
# k-means clustering
km <-kmeans(boston_K_scaled, centers = 2, nstart = 20)
km
# plot the Boston dataset with clusters
pairs(boston_K_scaled[1:5], col = km$cluster)
pairs(boston_K_scaled[6:10], col = km$cluster)
library(MASS)
data('Boston')
# center and standardize variables
boston_K2_scaled <- scale(Boston)
# summaries of the scaled variables
summary(boston_K2_scaled)
# class of the boston_scaled object
class(boston_K2_scaled)
# change the object to data frame
boston_K2_scaled <- as.data.frame(boston_K2_scaled)
#
km <-kmeans(boston_K2_scaled, centers = 2, nstart = 20)
km
# number of rows in the Boston dataset
n <- nrow(boston_K2_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_K2_scaled[ind,]
# create test set
test <- boston_K2_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# summary of the scaled crime rate
summary(boston_scaled$crim)
# create a quantile vector of crim and print it
bins <- quantile(boston_scaled$crim)
# number of rows in the Boston dataset
n <- nrow(boston_K2_scaled)
# choose randomly 80% of the rows
ind <- sample(n,  size = n * 0.8)
# create train set
train <- boston_K2_scaled[ind,]
# create test set
test <- boston_K2_scaled[-ind,]
# save the correct classes from test data
correct_classes <- test$crime
# remove the crime variable from test data
test <- dplyr::select(test, -crime)
# number of rows in the Boston dataset
n2 <- nrow(boston_K2_scaled)
# choose randomly 80% of the rows
ind2 <- sample(n2,  size = n2 * 0.8)
# create train set
train2 <- boston_K2_scaled[ind,]
# create test set
test2 <- boston_K2_scaled[-ind,]
# save the correct classes from test data
correct_classes2 <- test2$crime
# remove the crime variable from test data
test2 <- dplyr::select(test2, -crime)
human <- read.table("create_human.csv", sep = "," , header=TRUE)
# Annukka Puotiniemi
# 20.11.2018
# Data wrangling exercise
# This is my script file for chapter 5 data wrangling, done in week 4.
# Part 1. - create new script file is done, hence you're reading this :)
# Part 2. Read the two csv files
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# Part 3. See the structure and dimensions of the data, and create summaries of the variables
str(hd)
head(hd)
summary(hd)
str(gii)
head(gii)
summary(gii)
# Part 4. Look at the meta files and rename the variables with (shorter) descriptive names
names(hd)
names(gii)
colnames(hd) <- c("HDI.Rank","Country","HDI","Life.Exp","Edu.Exp","Edu.Mean","GNI","GNI.Minus.Rank")
colnames(gii) <- c("GII.Rank", "Country", "GII","Mat.Mor","Ado.Birth","Parli.F","Edu2.F","Edu2.M","Labo.F","Labo.M")
# Part 5. Mutate the “Gender inequality” data and create two new variables. The first one should be the ratio of
# Female and Male populations with secondary education in each country. (i.e. edu2F / edu2M). The second new
# variable should be the ratio of labour force participation of females and males in each country
# (i.e. labF / labM).
gii <- mutate(gii, Edu2.FM = Edu2.F/Edu2.M)
gii <- mutate(gii, Labo.FM = Labo.F/Labo.M)
# Part 6. Join together the two datasets using the variable Country as the identifier. Keep only the countries
# in both data sets (Hint: inner join). The joined data should have 195 observations and 19 variables. Call the
# new joined data "human" and save it in your data folder.
library(dplyr)
human <- inner_join(hd, gii, by = "Country")
str(human) # making sure that the data has 195 obs and 19 variables
write.csv(human, file = "create_human.csv", row.names=FALSE)
human <- read.table("create_human.csv", sep = "," , header=TRUE)
human
## ~ ~ End of Data Wrangling ~ ~
## ~ ~ Data Wrangling for Chapter 5 ~ ~
# Annukka Puotiniemi
# 21.11.2018
# Data wrangling exercise
# This is my script file for chapter 5 data wrangling, continued from last week.
# Link to the original data source (2 files, that I have already combined to the "human" data found below):
# http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv
# http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv
# Load the human data into R. Explore the structure and the dimensions of the data. Describe the data briefly.
human <- read.table("create_human.csv", sep = "," , header=TRUE)
str(human) # the data has 195 observations and 19 variables, as it should.
head(human)
summary(human)
# This data originates from the United Nations Development Programme. The Human Development Index (HDI) was created
# to emphasize that, for an assesment of the development of a country, economic growth is not enough as a measure.
# Instead, people and their capabilities should be the assesment criteria. The HDI is made up of three indices:
# Life Expectancy Index, Education Index, and GNI Index.
# More information about the index can be found here: http://hdr.undp.org/en/content/human-development-index-hdi
# The data combines several indicators, collected from most countries in the world. The descriptions of the
# variables can be found here: https://raw.githubusercontent.com/TuomoNieminen/Helsinki-Open-Data-Science/master/datasets/human_meta.txt
# 1. Mutate the data: transform the Gross National Income (GNI) variable to numeric
library(stringr)
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
# 2. Exclude unneeded variables: keep only the columns matching the following variable names (described in the meta
# file above):  "Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F"
# columns to keep
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
# select the 'keep' columns
human <- select(human, one_of(keep))
# 3. Remove all rows with missing values
# print out a completeness indicator of the 'human' data
complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with NA values
human <- filter(human, complete.cases(human))
# 4. Remove the observations which relate to regions instead of countries
# look at the last 10 observations
tail(human, 10)
# last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human <- human[1:last, ]
# 5. Define the row names of the data by the country names and remove the country name column from the data.
# The data should now have 155 observations and 8 variables.
# add countries as rownames
rownames(human) <- human$Country
# remove the Country variable
human <- select(human, -Country)
str(human) # 155 observations and 8 variables, correct!
# Save the human data in your data folder including the row names. You can overwrite your old ‘human’ data.
write.csv(human, file = "create_human.csv", row.names=TRUE)
## ~ ~ End of Data Wrangling ~ ~
human <- read.table("create_human.csv", sep = "," , header=TRUE)
setwd("C:/Users/annuk/OneDrive/Uni of Helsinki/Introduction to Opean Data Science/IODS-project/data")
human <- read.table("create_human.csv", sep = "," , header=TRUE)
setwd("C:/Users/annuk/OneDrive/Uni of Helsinki/Introduction to Opean Data Science/IODS-project")
setwd("C:/Users/annuk/OneDrive/Uni of Helsinki/Introduction to Opean Data Science/IODS-project")
human <- read.table("create_human.csv", sep = "," , header=TRUE)
summary(human)
install.packages("corrplot")
install.packages("tidyr")
install.packages("dplyr")
install.packages("dplyr")
library(ggplot2)
library(ggplot2)
p <- ggpairs(human, mapping = aes(alpha=0.3), lower = list(combo = wrap("facethist", bins = 20)), cardinality_threshold = NULL) +ggtitle("Relationships between variables")
library(ggplot)
p <- ggpairs(human, mapping = aes(alpha=0.3), lower = list(combo = wrap("facethist", bins = 20)), cardinality_threshold = NULL) +ggtitle("Relationships between variables")
pairs(human)
library(stringr)
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
# select the 'keep' columns
human <- select(human, one_of(keep))
# 3. Remove all rows with missing values
# print out a completeness indicator of the 'human' data
complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with NA values
human <- filter(human, complete.cases(human))
# 4. Remove the observations which relate to regions instead of countries
# look at the last 10 observations
tail(human, 10)
# last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human <- human[1:last, ]
# 5. Define the row names of the data by the country names and remove the country name column from the data.
# The data should now have 155 observations and 8 variables.
# add countries as rownames
rownames(human) <- human$Country
# remove the Country variable
human <- select(human, -Country)
str(human) # 155 observations and 8 variables, correct!
# Save the human data in your data folder including the row names. You can overwrite your old ‘human’ data.
write.csv(human, file = "create_human.csv", row.names=TRUE)
# Annukka Puotiniemi
# 20.11.2018
# Data wrangling exercise
# This is my script file for chapter 5 data wrangling, done in week 4.
# Part 1. - create new script file is done, hence you're reading this :)
# Part 2. Read the two csv files
hd <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv", stringsAsFactors = F)
gii <- read.csv("http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv", stringsAsFactors = F, na.strings = "..")
# Part 3. See the structure and dimensions of the data, and create summaries of the variables
str(hd)
head(hd)
summary(hd)
str(gii)
head(gii)
summary(gii)
# Part 4. Look at the meta files and rename the variables with (shorter) descriptive names
names(hd)
names(gii)
colnames(hd) <- c("HDI.Rank","Country","HDI","Life.Exp","Edu.Exp","Edu.Mean","GNI","GNI.Minus.Rank")
colnames(gii) <- c("GII.Rank", "Country", "GII","Mat.Mor","Ado.Birth","Parli.F","Edu2.F","Edu2.M","Labo.F","Labo.M")
# Part 5. Mutate the “Gender inequality” data and create two new variables. The first one should be the ratio of
# Female and Male populations with secondary education in each country. (i.e. edu2F / edu2M). The second new
# variable should be the ratio of labour force participation of females and males in each country
# (i.e. labF / labM).
gii <- mutate(gii, Edu2.FM = Edu2.F/Edu2.M)
gii <- mutate(gii, Labo.FM = Labo.F/Labo.M)
# Part 6. Join together the two datasets using the variable Country as the identifier. Keep only the countries
# in both data sets (Hint: inner join). The joined data should have 195 observations and 19 variables. Call the
# new joined data "human" and save it in your data folder.
library(dplyr)
human <- inner_join(hd, gii, by = "Country")
str(human) # making sure that the data has 195 obs and 19 variables
write.csv(human, file = "create_human.csv", row.names=FALSE)
human <- read.table("create_human.csv", sep = "," , header=TRUE)
human
## ~ ~ End of Data Wrangling ~ ~
## ~ ~ Data Wrangling for Chapter 5 ~ ~
# Annukka Puotiniemi
# 21.11.2018
# Data wrangling exercise
# This is my script file for chapter 5 data wrangling, continued from last week.
# Link to the original data source (2 files, that I have already combined to the "human" data found below):
# http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/human_development.csv
# http://s3.amazonaws.com/assets.datacamp.com/production/course_2218/datasets/gender_inequality.csv
# Load the human data into R. Explore the structure and the dimensions of the data. Describe the data briefly.
human <- read.table("create_human.csv", sep = "," , header=TRUE)
str(human) # the data has 195 observations and 19 variables, as it should.
head(human)
summary(human)
# This data originates from the United Nations Development Programme. The Human Development Index (HDI) was created
# to emphasize that, for an assesment of the development of a country, economic growth is not enough as a measure.
# Instead, people and their capabilities should be the assesment criteria. The HDI is made up of three indices:
# Life Expectancy Index, Education Index, and GNI Index.
# More information about the index can be found here: http://hdr.undp.org/en/content/human-development-index-hdi
# The data combines several indicators, collected from most countries in the world. The descriptions of the
# variables can be found here: https://raw.githubusercontent.com/TuomoNieminen/Helsinki-Open-Data-Science/master/datasets/human_meta.txt
# 1. Mutate the data: transform the Gross National Income (GNI) variable to numeric
library(stringr)
str_replace(human$GNI, pattern=",", replace ="") %>% as.numeric
# 2. Exclude unneeded variables: keep only the columns matching the following variable names (described in the meta
# file above):  "Country", "Edu2.FM", "Labo.FM", "Edu.Exp", "Life.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F"
# columns to keep
keep <- c("Country", "Edu2.FM", "Labo.FM", "Life.Exp", "Edu.Exp", "GNI", "Mat.Mor", "Ado.Birth", "Parli.F")
# select the 'keep' columns
human <- select(human, one_of(keep))
# 3. Remove all rows with missing values
# print out a completeness indicator of the 'human' data
complete.cases(human)
# print out the data along with a completeness indicator as the last column
data.frame(human[-1], comp = complete.cases(human))
# filter out all rows with NA values
human <- filter(human, complete.cases(human))
# 4. Remove the observations which relate to regions instead of countries
# look at the last 10 observations
tail(human, 10)
# last indice we want to keep
last <- nrow(human) - 7
# choose everything until the last 7 observations
human <- human[1:last, ]
# 5. Define the row names of the data by the country names and remove the country name column from the data.
# The data should now have 155 observations and 8 variables.
# add countries as rownames
rownames(human) <- human$Country
# remove the Country variable
human <- select(human, -Country)
str(human) # 155 observations and 8 variables, correct!
# Save the human data in your data folder including the row names. You can overwrite your old ‘human’ data.
write.csv(human, file = "create_human.csv", row.names=TRUE)
## ~ ~ End of Data Wrangling ~ ~
human_mini <- select(human, -X, -GNI)
human_mini <- select(human, -Country, -GNI)
human_mini <- select(human, -GNI)
human_mini <- select(human, -GNI)
p <- ggpairs(human_mini, mapping = aes(alpha=0.3), lower = list(combo = wrap("facethist", bins = 20)))
install.packages("ggplot2")
install.packages("ggplot2")
