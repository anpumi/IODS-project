abline(v = 0)
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95)
t_test$conf.int
intervals <- matrix(sample_randoms, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95)
t_test$conf.int
intervals <- matrix(sample_randoms, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95)
t_test$conf.int
intervals <- matrix(sample_randoms, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95)
t_test$conf.int
intervals <- matrix(sample_randoms, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95)
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95)
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95)
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(500, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95)
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95)
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
# I ran the above s
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95)
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=TRUE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(500, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95)
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=TRUE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
t_test$conf.int
t_test <- t.test(sample_randoms, conf.level = 0.95, size=100); t_test
t_test$conf.int
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
intervals <- matrix(sample_randoms$conf.int, nrow=100, ncol=2, byrow=TRUE); intervals
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=TRUE); intervals
intervals <- matrix(t_test$conf.int, nrow=2, ncol=100, byrow=TRUE); intervals
intervals <- matrix(t_test$conf.int, nrow=2, ncol=100, byrow=FALSE); intervals
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95, size=100); t_test
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=2, ncol=100, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95, size=100); t_test
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
# I ran the above s
replicate(intervals)
replicate(100, intervals)
replicate(1:100, intervals)
# 8. Generate 100 random samples...
randoms <-  rnorm(50, mean=0, sd=3); randoms
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms
t_test <- t.test(sample_randoms, conf.level = 0.95, size=100); t_test
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
randoms <-  rnorm(50, mean=0, sd=3); randoms #works
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms #works
sample_loop <- numeric(sample_randoms)
for(i in 1:sample_randoms) {
sample_loop[i] <- t.test(sample_randoms, conf.level = 0.95, size=100)
}
> sample_loop
sample_loop
randoms <-  rnorm(50, mean=0, sd=3); randoms #works
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms #works
sample_loop <- numeric(sample_randoms)
for(i in 1:sample_randoms) {
sample_loop[i] <- t.test(sample_randoms, conf.level = 0.95, size=100)
}
sample_loop
randoms <-  rnorm(50, mean=0, sd=3); randoms #works
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms #works
sample_loop <- t_test <- t.test(sample_randoms, conf.level = 0.95, size=100)
for(i in 1:sample_randoms) {
sample_loop[i] <- t.test(sample_randoms, conf.level = 0.95, size=100)
}
sample_loop
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(50, mean=0, sd=3); randoms #works
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms #works
sample_loop <- t_test <- t.test(sample_randoms, conf.level = 0.95, size=100)
for(i in 1:sample_randoms) {
sample_loop[i] <- t.test(sample_randoms, conf.level = 0.95, size=100)
}
sample_loop
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals #problem here, feeding down from the above
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
randoms <-  rnorm(50, mean=0, sd=3); randoms #works
sample_randoms <- sample(randoms, size=100, replace=TRUE); sample_randoms #works
sample_loop <- t_test <- t.test(sample_randoms, conf.level = 0.95, size=100)
for(i in 1:sample_randoms) {
sample_loop[i] <- t.test(sample_randoms, conf.level = 0.95, size=100)
}
sample_loop
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals #problem here, feeding down from the above
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
sample_loop
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals #problem here, feeding down from the above
randoms <-  rnorm(50, mean=0, sd=3)
sample_randoms <- sample(randoms, size=100, replace=TRUE)
sample_loop <- t_test <- t.test(sample_randoms, conf.level = 0.95, size=100)
for(i in 1:sample_randoms) {
sample_loop[i] <- t.test(sample_randoms, conf.level = 0.95, size=100)
}
sample_loop
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=2, ncol=100, byrow=FALSE)
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
sample_loop
intervals <- function(replicate(100)) {
int <- matrix(t_test$conf.int, nrow=2, ncol=100, byrow=FALSE)
}
return(int)
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
randoms <-  rnorm(50, mean=0, sd=3)
sample_randoms <- sample(randoms, size=100, replace=TRUE)
sample_loop <- t_test <- t.test(sample_randoms, conf.level = 0.95, size=100)
for(i in 1:sample_randoms) {
sample_loop[i] <- t.test(sample_randoms, conf.level = 0.95, size=100)
}
sample_loop
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
z_test <- function(x, sigma, mu_0) {
z <- sqrt(length(x))*(mean(x)-mu_0)/sigma
p_value <- 2*(1-abs(pnorm(z)))
return(list(z, p_value))
}
z_test(x=c(90,100,110,120,80,90,110,105,95),sigma=5,mu_0=105)
z_test(x=c(90,100,110,120,80,90,110,105,95),sigma=95,mu_0=105)
z_test(x=c(90,100,110,120,80,90,110,105,95),sigma=5,mu_0=105)
sample_loop <- t_test <- t.test(sample_randoms, conf.level = 0.95, size=100)
for(i in 1:sample_randoms) {
sample_loop[i] <- t.test(sample_randoms, conf.level = 0.95, size=100)
}
sample_loop
t_test <- t.test(sample_randoms, conf.level = 0.95, size=100)
for(i in 1:sample_randoms) {
sample_loop[i] <- t.test(sample_randoms, conf.level = 0.95, size=100)
}
sample_loop
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
t_test$conf.int
intervals <- matrix(t_test$conf.int, nrow=100, ncol=2, byrow=FALSE); intervals
replicate(100, intervals)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
airquality
sat <- c(542, 490, 582, 511, 515, 564, 500, 602, 488, 512, 518, 522, 505, 569, 575, 515, 520, 528, 533, 515)
t.test(sat, conf.level = 0.9)
#The true mean of the population of the given data above is likely between 517.9763 and 542.6237 (90% CI).
# (b) Use function t.test() to test the null hypothesis of problem 3 at the 5 percent
# level of signi???cance. Remember to note the alternative hypothesis. Make sure
# that the p-value is the same you obtained in problem 3.
t.test(sat, mu = 542, alternative="less")
binom.test(x=70,n=200, p = 0.45,alternative="less", conf.level = 0.99)
intervals <- replicate(100,t.test(rnorm(50,mean=0,sd=3))$conf.int)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
intervals <- replicate(100,t.test(rnorm(500,mean=0,sd=3))$conf.int)
plot(NULL, xlim = c(-2,2), ylim = c(1,100), yaxt="n", xlab="", ylab="")
segments(intervals[1,], 1:100, intervals[2,], 1:100,
col = ifelse(intervals[1,] * intervals[2,] <= 0, "black", "red"))
abline(v = 0)
airquality
sum(dbinom(c(10,8),15,prob=0.5))
qnorm(mean=100, sd=14.8, p=0.96, lower.tail=TRUE)
t.test(100, 0.95)
t.test(c(airquality(Month=5)),64)
t.test(c("airquality"(Month=5)),64)
> temps <- subset(airquality, Month == 5)
temps <- subset(airquality, Month == 5)
temps <- subset(airquality, Month == 5); temps
> t.test(temps$Temp, mu=64)
t.test(temps$Temp, mu=64)
t.test(temps$Temp, mu<64)
t.test(temps$Temp, mu=<64)
t.test(temps$Temp, mu<=64)
t.test(temps$Temp, mu=64)
install.packages("rmarkdown")
par(mfrow = c(2,2))
plot(my_model, which = c(1:2, 5))
my_model <- lm(points ~ attitude, data = mydata)
summary(my_model)
par(mfrow = c(2,2))
plot(my_model, which = c(1:2, 5))
# Annukka Puotiniemi
# 25.10.2018
# This is my data wrangling exercise file
mydata <- read.table("http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS3-data.txt", header=TRUE, sep="\t")
str(mydata)
mydata
# The data frame consist of 183 observations of 60 variables, all of which are integers.
# Create an analysis dataset with the variables gender, age, attitude, deep, stra, surf and points
# by combining questions in the learning2014 data, as defined in the datacamp exercises and also on
# the bottom part of the following page (only the top part of the page is in Finnish).
# http://www.helsinki.fi/~kvehkala/JYTmooc/JYTOPKYS2-meta.txt. Scale all combination variables to the
# original scales (by taking the mean) (https://campus.datacamp.com/courses/helsinki-open-data-science/regression-and-model-validation?ex=2).
# Exclude observations where the exam points variable is zero.
# (The data should then have 166 observations and 7 variables)
gender <- mydata$gender
age <- mydata$Age
attitude <- mydata$Attitude/10
d_sm <- mydata$D03+mydata$D11+mydata$D19+mydata$D27
d_sm <- d_sm/4
d_ri <- mydata$D07+mydata$D14+mydata$D22+mydata$D30
d_ri <- d_ri/4
d_ue <- mydata$D06+mydata$D15+mydata$D23+mydata$D31
d_ue <- d_ue/4
deep <- d_sm+d_ri+d_ue
deep <- deep/3
st_os <- mydata$ST01+mydata$ST09+mydata$ST17+mydata$ST25
st_os <- st_os/4
st_tm <- mydata$ST04+mydata$ST12+mydata$ST20+mydata$ST28
st_tm <- st_tm/4
stra <- st_os+st_tm
stra <- stra/2
su_lp <- mydata$SU02+mydata$SU10+mydata$SU18+mydata$SU26
su_lp <- su_lp/4
su_um <- mydata$SU05+mydata$SU13+mydata$SU21+mydata$SU29
su_um <- su_um/4
su_sb <- mydata$SU08+mydata$SU16+mydata$SU24+mydata$SU32
su_sb <- su_sb/4
surf <- su_lp+su_um+su_sb
surf <- surf/3
points <- mydata$Points
analysis_dataset <- data.frame(gender, age, attitude, deep, stra, surf, points)
#analysis_dataset <- filter(analysis_dataset, points > 0)
#analysis_dataset does not work after this, prints all NA values
a_dataset <- analysis_dataset[apply(analysis_dataset!=0, 1, all),] #I found this solution for excluding
# zero value observations in StackOverflow. I now have the correct number of observations and variabes,
# but this method would exclude all other zero rows too I think...
# Set the working directory of you R session the iods project folder (study how to do this with RStudio).
# Done by choosing 'Session' > 'Set Working Directory' > 'Choose Directory...'
# Save the analysis dataset to the ‘data’ folder, using for example write.csv() or write.table() functions.
# You can name the data set for example as learning2014(.txt or .csv). See ?write.csv for help or search the
# web for pointers and examples. Demonstrate that you can also read the data again by using read.table() or
# read.csv().  (Use `str()` and `head()` to make sure that the structure of the data is correct).
write.csv(a_dataset, file = "learning2014.csv")
a_data <- read.csv("learning2014.csv")
str(a_data)
head(a_data)
a_data
# Analysis (max 15 points)
mydata <- read.csv("learning2014.csv")
mydata <- mydata[-1]
mydata
install.packages('ggplot2')
library(ggplot2)
p1 <- ggplot(mydata, aes(x = attitude, y = points, col = gender))
p2 <- p1 + geom_point()
p3 <- p2 + geom_smooth(method = "lm")
p3
summary(mydata)
# Choose three variables as explanatory variables and fit a regression model
# where exam points is the target (dependent) variable. Show a summary of the
# fitted model and comment and interpret the results.
# https://feliperego.github.io/blog/2015/10/23/Interpreting-Model-Output-In-R
# Explain and interpret the
# statistical test related to the model parameters. If an explanatory variable
# in your model does not have a statistically significant relationship with the
# target variable, remove the variable from the model and fit the model again
# without it.
# The p-values for the coefficients indicate whether these relationships are
# statistically significant. Keeping variables that are not statistically
# significant can reduce the model’s precision.
# The best model is found by minimizing the prediction errors that the model
# would make, by minimizing the sum of squared residuals.
# good explanation for the interpretation of the results:
# http://statisticsbyjim.com/regression/interpret-coefficients-p-values-regression/
my_model <- lm(points ~ age + attitude + stra, data = mydata)
summary(my_model)
my_model.res = resid(my_model) #checking that the residual plot is random
plot(mydata$attitude, my_model.res)
my_model <- lm(points ~ attitude, data = mydata)
summary(my_model)
par(mfrow = c(2,2))
plot(my_model, which = c(1:2, 5))
View(product)
# good explanation for the interpretation of the results:
# http://statisticsbyjim.com/regression/interpret-coefficients-p-values-regression/
my_model <- lm(points ~ age + attitude + stra, data = mydata)
# Annukka Puotiniemi
# 8.11.2018
# Data wrangling exercise
# This is my script file for chapter 3 exercise, for which the data was downloaded from the UC Irvine Machine Learning Repository.
# P. Cortez and A. Silva. Using Data Mining to Predict Secondary School Student Performance. In A. Brito and J. Teixeira Eds., Proceedings of 5th FUture BUsiness TEChnology Conference (FUBUTEC 2008) pp. 5-12, Porto, Portugal, April, 2008, EUROSIS, ISBN 978-9077381-39-7.
# Read the two csv files and explore the structure and dimensions of the data:
math <- read.table("student-mat.csv", sep = ";" , header=TRUE)
str(math)
head(math)
por <- read.table("student-por.csv", sep = ";" , header=TRUE)
str(por)
head(por)
# Join the two data sets. Keep only the students present in both data sets. Explore the structure and dimensions of the joined data
library(dplyr)
join_by <- c("school","sex","age","address","famsize","Pstatus","Medu","Fedu","Mjob","Fjob","reason","nursery","internet")
math_por <- inner_join(math, por, by = join_by, suffix = c(".math", ".por"))
str(math_por)
head(math_por)
colnames(math_por)
glimpse(math_por)
# print out the column names of 'math_por'
colnames(mat_por)
# create a new data frame with only the joined columns
alc <- select(math_por, one_of(join_by))
# the columns in the datasets which were not used for joining the data
notjoined_columns <- colnames(math)[!colnames(math) %in% join_by]
# print out the columns not used for joining
notjoined_columns
# for every column name not used for joining...
for(column_name in notjoined_columns) {
# select two columns from 'math_por' with the same original name
two_columns <- select(math_por, starts_with(column_name))
# select the first column vector of those two columns
first_column <- select(two_columns, 1)[[1]]
# if that first column vector is numeric...
if(is.numeric(first_column)) {
# take a rounded average of each row of the two columns and
# add the resulting vector to the alc data frame
alc[column_name] <- round(rowMeans(two_columns))
} else { # else if it's not numeric...
# add the first column vector to the alc data frame
alc[column_name] <- first_column
}
}
# glimpse at the new combined data
glimpse(alc)
# Take the average of the answers related to weekday and weekend alcohol consumption to create a new column
# 'alc_use' to the joined data. Then use 'alc_use' to create a new logical column 'high_use' which is TRUE
# for students for which 'alc_use' is greater than 2 (and FALSE otherwise).
library(dplyr); library(ggplot2)
alc <- mutate(alc, alc_use = (Dalc + Walc) / 2)
alc <- mutate(alc, high_use = alc_use > 2)
# Glimpse at the joined and modified data to make sure everything is in order. The joined data should now
# have 382 observations of 35 variables. Save the joined and modified data set to the ‘data’ folder, using
# for example write.csv() or write.table() functions.
glimpse(alc)
write.csv(alc, file = "create_alc.csv",append = TRUE, quote = TRUE, sep = " ",eol = "\n", na = "NA", dec = ",", row.names = FALSE, col.names = TRUE, qmethod = c("escape", "double"), fileEncoding = "")
alc <- read.table("create_alc.csv", sep = ";" , header=TRUE)
## ~ ~ End of Data Wrangling ~ ~
setwd("C:/Users/annuk/OneDrive/Uni of Helsinki/Introduction to Opean Data Science/IODS-project/data")
g1 <- ggplot(data = alc, aes(x = high_use, fill = sex))
g1 + geom_bar()
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
alc
alc <- read.table("create_alc.csv", sep = ";" , header=TRUE)
write.csv(alc, file = "create_alc.csv",append = TRUE, quote = TRUE, sep = " ",eol = "\n", na = "NA", dec = ",", row.names = FALSE, col.names = TRUE, qmethod = c("escape", "double"), fileEncoding = "")
alc <- read.table("create_alc.csv", sep = ";" , header=TRUE)
alc
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
g1 + geom_bar()
alc <- read.table("create_alc.csv", sep = ";" , header=TRUE)
names(alc)
install.packages("dplyr")
install.packages("ggplot2")
library(dplyr)
library(ggplot2)
setwd("C:/Users/annuk/OneDrive/Uni of Helsinki/Introduction to Opean Data Science/IODS-project/data")
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
g1 + geom_bar()
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
setwd("C:/Users/annuk/OneDrive/Uni of Helsinki/Introduction to Opean Data Science/IODS-project/data")
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
g1 + geom_bar()
library(ggplot2)
library(dplyr)
install.packages("dplyr")
install.packages("dplyr")
library(dplyr)
g1 <- ggplot(data = alc, aes(x = alc_use, fill = sex))
g1 + geom_bar()
colnames(alc)
install.packages("dplyr")
install.packages("dplyr")
